services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: smartsensor-rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: smartsensor-postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d smartsensor"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Data Generators (Multiple Configurations)
  generator-1:
    build: ./generator
    container_name: smartsensor-generator-1
    env_file:
      - .env
    environment:
      GENERATOR_CONFIG_ID: generator-1
      GENERATOR_CONFIG_FILE: /app/generator-configs.json
    volumes:
      - ./generator-configs.json:/app/generator-configs.json:ro
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # generator-2:
  #   build: ./generator
  #   container_name: smartsensor-generator-2
  #   env_file:
  #     - .env
  #   environment:
  #     GENERATOR_CONFIG_ID: generator-2
  #     GENERATOR_CONFIG_FILE: /app/generator-configs.json
  #   volumes:
  #     - ./generator-configs.json:/app/generator-configs.json:ro
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   restart: unless-stopped

  # generator-3:
  #   build: ./generator
  #   container_name: smartsensor-generator-3
  #   env_file:
  #     - .env
  #   environment:
  #     GENERATOR_CONFIG_ID: generator-3
  #     GENERATOR_CONFIG_FILE: /app/generator-configs.json
  #   volumes:
  #     - ./generator-configs.json:/app/generator-configs.json:ro
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   restart: unless-stopped

  # Data Consumer/Processor
  consumer:
    build: ./consumer
    container_name: smartsensor-consumer
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      ENABLE_LLM: true
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # ML Service
  ml-service:
    build: ./ml-service
    container_name: smartsensor-ml-service
    env_file:
      - .env
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8002:8002"
    volumes:
      - ml_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Dashboard/UI
  dashboard:
    build: ./dashboard
    container_name: smartsensor-dashboard
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_URL: http://localhost:8001
    depends_on:
      - consumer
    restart: unless-stopped

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: smartsensor-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: smartsensor-loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  # Promtail for Log Collection
  promtail:
    image: grafana/promtail:latest
    container_name: smartsensor-promtail
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: smartsensor-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  # N8N for Alert Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: smartsensor-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
    volumes:
      - n8n_data:/home/node/.n8n
    restart: unless-stopped

volumes:
  rabbitmq_data:
  postgres_data:
  ml_models:
  prometheus_data:
  loki_data:
  grafana_data:
  n8n_data: 